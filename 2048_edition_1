/***************************
                文件名称：Edition_1
                文件描述：实现2048逻辑代码
                编译环境：CLION
                最后修改：<2021年1月26日> <创建工程> <阿克之心>
                ***************************************/

#include "stdio.h"
#include "stdlib.h"
#include "time.h"
#include "conio.h"


int print();
int direction = 0;
int map[4][4] = {0};
int flag = 0;

void Add();
void Direction_Check();
void Process_Main(int direction);
void Judge_Output();

int main(){
    Add(0);
    print();
    int k = 0;
    while(!flag){
        printf("\nENTER\n");
        Direction_Check();
        Add();
        print();
        k++;
        printf("%d",(int)time(NULL));
        Judge_Output();
    }
    printf("OVER!");
    return 0;
}

int print(){
    printf("\t\t\t⎡¯¯¯⎪¯¯¯⎪¯¯¯⎪¯¯¯⎤\n");
    printf("\t\t\t⎪ %d ⎪ %d ⎪ %d ⎪ %d ⎪\n",map[0][0],map[0][1],map[0][2],map[0][3]);
    printf("\t\t\t⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪\n");
    printf("\t\t\t⎪ %d ⎪ %d ⎪ %d ⎪ %d ⎪\n",map[1][0],map[1][1],map[1][2],map[1][3]);
    printf("\t\t\t⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪\n");
    printf("\t\t\t⎪ %d ⎪ %d ⎪ %d ⎪ %d ⎪\n",map[2][0],map[2][1],map[2][2],map[2][3]);
    printf("\t\t\t⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪¯¯¯⎪\n");
    printf("\t\t\t⎪ %d ⎪ %d ⎪ %d ⎪ %d ⎪\n",map[3][0],map[3][1],map[3][2],map[3][3]);
    printf("\t\t\t ¯¯¯ ¯¯¯ ¯¯¯ ¯¯¯");
    return 0;
}

void Add(){                //dir=0:第一次进入主界面 dir=1,2,3,4 方向分别为下，左，上，右
    int n, row_a, column, num, j, check = 1;

    srand((unsigned ) time(NULL));   //srand(unsigned seed)通过参数seed改变系统提供的种子值，从而可以使得每次调用rand函数生成的伪随机数序列不同，从而实现真正意义上的“随机”。
    n = rand() % 2;
    row_a = rand() % 4;
    column = rand() % 4;

    if (n == 0) num = 2;
    if (n == 1) num = 4;

    switch (direction) {
        case 0 :map[row_a][column] = num;
            break;
        case 1 :
            Process_Main(1);
            for (int j = 0; j < 4; j++) {
                check *= map[0][j];
            }
            if (check != 0) break;
            else{
                while (map[0][column] != 0){
                    column = rand() % 4;
                }
                map[0][column] = num;
            }
            break;
        case 2 :
            Process_Main(2);
            for (int j = 0; j < 4; j++) {
                check *= map[j][3];
            }
            if (check != 0) break;
            else{
                while (map[row_a][3] != 0){
                    row_a = rand() % 4;
                }
                map[row_a][3] = num;
            }
            break;
        case 3 :
            Process_Main(3);
            for (int j = 0; j < 4; ++j) {
                check *= map[3][j];
            }
            if (check != 0) break;
            else{
                while (map[3][column] != 0){
                    column = rand() % 4;
                }
                map[3][column] = num;
            }
            break;
        case 4 :
            Process_Main(4);
            for (int j = 0; j < 4; ++j) {
                check *= map[j][0];
            }
            if (check != 0) break;
            else{
                while (map[row_a][0] != 0){
                    row_a = rand() % 4;
                }
                map[row_a][0] = num;
            }
            break;
    }
}

void Direction_Check() {
    int a;
    printf("Please enter the key!\n");
    a = getchar();
    switch (a) {
        case 119:
            direction = 3;
            break;
        case 97:
            direction = 2;
            break;
        case 115:
            direction = 1;
            break;
        case 100:
            direction = 4;
            break;
    }
    a = getchar();
}

void Process_Main(int direction){    //以往下为例子
    int row, col, base, count =0;
    switch (direction) {
        case 1:
            for (int col = 3; col >= 0; col--) {
                for (int row = 3; row > 0; row--) {
                    count = 0;
                    if (map[row][col]!=0) {
                        base = row - 1 ;
                        for (; base >= 0; base--) {
                            if (map[base][col] == 0 || count>=2) continue;
                            else {
                                if (map[row][col] == map[base][col]) {
                                    map[row][col] += map[base][col];
                                    map[base][col] = 0;
                                    count++;
                                }else{
                                    break;
                                }
                            }
                        }
                    } else{
                        base = row - 1;
                        for (; base >= 0; base--) {
                            if (map[base][col] == 0 || count>=2){
                                continue;
                            }else {
                                if (map[row][col]== 0 || map[row][col] == map[base][col]) {
                                    map[row][col] += map[base][col];
                                    count++;
                                    map[base][col] = 0;
                                } else{
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            break;
        case 2:
            for (int row = 0; row <= 3; row++) {
                for (int col = 0; col < 3; col++) {
                    count = 0;
                    if (map[row][col]!=0) {
                        base = col + 1 ;
                        for (; base <=3 ; base++) {
                            if (map[row][base] == 0 ||  count>=2) continue;
                            else {
                               if (map[row][col] == map[row][base]) {
                                   map[row][col] += map[row][base];
                                   map[row][base] = 0;
                                   count++;
                               }else{
                                   break;
                               }
                            }
                        }
                    } else{
                        base = col + 1;
                        for (; base <= 3; base++) {
                            if (map[row][base] == 0 || count>=2){
                                continue;
                            }else {
                                if (map[row][col] == 0 || map[row][col] == map[row][base]) {
                                    map[row][col] += map[row][base];
                                    map[row][base] = 0;
                                    count++;
                                }else{
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            break;
        case 3:
            for (int col = 3; col >= 0; col--) {
                for (int row = 0; row < 3; row++) {
                    count = 0;
                    if (map[row][col]!=0) {
                        base = row + 1 ;
                        for (; base <= 3; base++) {
                            if (map[base][col]==0 || count>=2) continue;
                            else {
                                if (map[row][col] == map[base][col]) {
                                    map[row][col] += map[base][col];
                                    map[base][col] = 0;
                                    count++;
                                }else {
                                    break;
                                }
                            }
                        }
                    } else{
                        base = row + 1;
                        for (; base <= 3; base++) {
                            map[row][col] += map[base][col];
                            map[base][col] = 0;
                            if ( map[base][col]==0 ||count>=2){
                                continue;
                            }else {
                                if (map[row][col] == 0 || map[row][col] == map[base][col]) {
                                    map[row][col] += map[base][col];
                                    map[base][col] = 0;
                                    count++;
                                }else {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            break;
        case 4:
            for (int row = 0; row <= 3; row++) {
                for (int col = 3; col >0 ; col--) {
                    count = 0;
                    if (map[row][col]!=0) {
                        base = col - 1 ;
                        for (; base >=0 ; base--) {
                            if (map[row][base] == 0  || count>=2) continue;
                            else {
                                if (map[row][col] == map[row][base]) {
                                    map[row][col] += map[row][base];
                                    map[row][base] = 0;
                                    count++;
                                }else {
                                    break;
                                }
                            }
                        }
                    } else{
                        base = col - 1 ;
                        for (; base >=0 ; base--) {
                            if ( map[row][base] == 0 ||count>=2){
                                continue;
                            }else {
                                if (map[row][col] == 0 || map[row][col] == map[row][base]) {
                                    map[row][col] += map[row][base];
                                    map[row][base] = 0;
                                    count++;
                                }else {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            break;
    }
}

void Judge_Output(){
    for (int i = 0; i <3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (map[i][j] == 2048 ) {
                flag = 1;
                break;
            }
            else flag = 0;
        }

    }
}
